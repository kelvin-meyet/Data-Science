library(shiny); runApp('bmi_calculator.r')
runApp('D:/data_science/Rshiny - Data science Professor/iris pred/app-slider.R')
runApp('D:/data_science/Rshiny - Data science Professor/iris pred/app-numeric.R')
####################################
# Data Professor                   #
# http://youtube.com/dataprofessor #
# http://github.com/dataprofessor  #
####################################
# Importing libraries
library(RCurl) # for downloading the iris CSV file
library(randomForest)
library(caret)
# Importing the Iris data set
iris <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/iris.csv"),
stringsAsFactors = TRUE)
# Performs stratified random split of the data set
TrainingIndex <- createDataPartition(iris$Species, p=0.8, list = FALSE)
TrainingSet <- iris[TrainingIndex,] # Training Set
TestingSet <- iris[-TrainingIndex,] # Test Set
write.csv(TrainingSet, "training.csv")
write.csv(TestingSet, "testing.csv")
TrainSet <- read.csv("training.csv", header = TRUE, stringsAsFactors = TRUE)
TrainSet <- TrainSet[,-1]
# Building Random forest model
model <- randomForest(Species ~ ., data = TrainSet, ntree = 500, mtry = 4, importance = TRUE)
# Save model to RDS file
saveRDS(model, "rf_model.rds")
# Importing libraries
library(RCurl) # for downloading the iris CSV file
library(randomForest)
library(caret)
# Importing the Iris data set
iris <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/iris.csv"),
stringsAsFactors = TRUE)
# Performs stratified random split of the data set
TrainingIndex <- createDataPartition(iris$Species, p=0.8, list = FALSE)
TrainingSet <- iris[TrainingIndex,] # Training Set
TestingSet <- iris[-TrainingIndex,] # Test Set
write.csv(TrainingSet, "training.csv")
write.csv(TestingSet, "testing.csv")
TrainSet <- read.csv("training.csv", header = TRUE, stringsAsFactors = TRUE)
TrainSet <- TrainSet[,-1]
# Building Random forest model
model <- randomForest(Species ~ ., data = TrainSet, ntree = 500, mtry = 4, importance = TRUE)
# Save model to RDS file
saveRDS(rf_model, "model.rds")
library(RCurl) # for downloading the iris CSV file
library(randomForest)
library(caret)
# Importing the Iris data set
iris <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/iris.csv"),
stringsAsFactors = TRUE)
# Performs stratified random split of the data set
TrainingIndex <- createDataPartition(iris$Species, p=0.8, list = FALSE)
TrainingSet <- iris[TrainingIndex,] # Training Set
TestingSet <- iris[-TrainingIndex,] # Test Set
write.csv(TrainingSet, "training.csv")
write.csv(TestingSet, "testing.csv")
TrainSet <- read.csv("training.csv", header = TRUE, stringsAsFactors = TRUE)
TrainSet <- TrainSet[,-1]
# Building Random forest model
model <- randomForest(Species ~ ., data = TrainSet, ntree = 500, mtry = 4, importance = TRUE)
# Save model to RDS file
saveRDS(model, "rf_model.rds")
#getwd()
getwd()
####################################
# Data Professor                   #
# http://youtube.com/dataprofessor #
# http://github.com/dataprofessor  #
####################################
# Importing libraries
library(RCurl) # for downloading the iris CSV file
library(randomForest)
library(caret)
# Importing the Iris data set
iris <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/iris.csv"),
stringsAsFactors = TRUE)
# Performs stratified random split of the data set
TrainingIndex <- createDataPartition(iris$Species, p=0.8, list = FALSE)
TrainingSet <- iris[TrainingIndex,] # Training Set
TestingSet <- iris[-TrainingIndex,] # Test Set
write.csv(TrainingSet, "training.csv")
write.csv(TestingSet, "testing.csv")
TrainSet <- read.csv("training.csv", header = TRUE, stringsAsFactors = TRUE)
TrainSet <- TrainSet[,-1]
# Building Random forest model
model <- randomForest(Species ~ ., data = TrainSet, ntree = 500, mtry = 4, importance = TRUE)
# Save model to RDS file
saveRDS(model, "RF_model.rds")
#getwd()
setwd("C:/Users/dumbl/KELVIN-GITHUB-WORKS/Data-Science/R-shiny/Iris_predictor_app")
####################################
# Data Professor                   #
# http://youtube.com/dataprofessor #
# http://github.com/dataprofessor  #
####################################
# Importing libraries
library(RCurl) # for downloading the iris CSV file
library(randomForest)
library(caret)
# Importing the Iris data set
iris <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/iris.csv"),
stringsAsFactors = TRUE)
# Performs stratified random split of the data set
TrainingIndex <- createDataPartition(iris$Species, p=0.8, list = FALSE)
TrainingSet <- iris[TrainingIndex,] # Training Set
TestingSet <- iris[-TrainingIndex,] # Test Set
write.csv(TrainingSet, "training.csv")
write.csv(TestingSet, "testing.csv")
TrainSet <- read.csv("training.csv", header = TRUE, stringsAsFactors = TRUE)
TrainSet <- TrainSet[,-1]
# Building Random forest model
model <- randomForest(Species ~ ., data = TrainSet, ntree = 500, mtry = 4, importance = TRUE)
# Save model to RDS file
saveRDS(model, "RF_model.rds")
#getwd()
getwd()
####################################
# Data Professor                   #
# http://youtube.com/dataprofessor #
# http://github.com/dataprofessor  #
####################################
# Importing libraries
library(RCurl) # for downloading the iris CSV file
library(randomForest)
library(caret)
# Importing the Iris data set
iris <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/iris.csv"),
stringsAsFactors = TRUE)
# Performs stratified random split of the data set
TrainingIndex <- createDataPartition(iris$Species, p=0.8, list = FALSE)
TrainingSet <- iris[TrainingIndex,] # Training Set
TestingSet <- iris[-TrainingIndex,] # Test Set
write.csv(TrainingSet, "training.csv")
write.csv(TestingSet, "testing.csv")
TrainSet <- read.csv("training.csv", header = TRUE, stringsAsFactors = TRUE)
TrainSet <- TrainSet[,-1]
# Building Random forest model
model <- randomForest(Species ~ ., data = TrainSet, ntree = 500, mtry = 4, importance = TRUE)
# Save model to RDS file
saveRDS(model, "RF_model.rds")
#getwd()
############################################
# Data Professor                           #
# http://youtube.com/dataprofessor         #
# http://github.com/dataprofessor          #
# http://facebook.com/dataprofessor        #
# https://www.instagram.com/data.professor #
############################################
# Import libraries
library(shiny)
library(data.table)
library(randomForest)
# Read in the RF model
model <- readRDS("RF_model.rds")
####################################
# User interface                   #
####################################
ui <- pageWithSidebar(
# Page header
headerPanel('Iris Predictor'),
# Input values
sidebarPanel(
#HTML("<h3>Input parameters</h3>"),
tags$label(h3('Input parameters')),
numericInput("Sepal.Length",
label = "Sepal Length",
value = 5.1),
numericInput("Sepal.Width",
label = "Sepal Width",
value = 3.6),
numericInput("Petal.Length",
label = "Petal Length",
value = 1.4),
numericInput("Petal.Width",
label = "Petal Width",
value = 0.2),
actionButton("submitbutton", "Submit",
class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Status/Output')), # Status/Output Text Box
verbatimTextOutput('contents'),
tableOutput('tabledata') # Prediction results table
)
)
####################################
# Server                           #
####################################
server<- function(input, output, session) {
# Input Data
datasetInput <- reactive({
df <- data.frame(
Name = c("Sepal Length",
"Sepal Width",
"Petal Length",
"Petal Width"),
Value = as.character(c(input$Sepal.Length,
input$Sepal.Width,
input$Petal.Length,
input$Petal.Width)),
stringsAsFactors = FALSE)
Species <- 0
df <- rbind(df, Species)
input <- transpose(df)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
})
# Status/Output Text Box
output$contents <- renderPrint({
if (input$submitbutton>0) {
isolate("Calculation complete.")
} else {
return("Server is ready for calculation.")
}
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
############################################
# Data Professor                           #
# http://youtube.com/dataprofessor         #
# http://github.com/dataprofessor          #
# http://facebook.com/dataprofessor        #
# https://www.instagram.com/data.professor #
############################################
# Import libraries
library(shiny)
library(data.table)
library(randomForest)
# Read in the RF model
model <- readRDS("RF_model.rds")
# Training set
TrainSet <- read.csv("training.csv", header = TRUE)
TrainSet <- TrainSet[,-1]
####################################
# User interface                   #
####################################
ui <- pageWithSidebar(
# Page header
headerPanel('Iris Predictor'),
# Input values
sidebarPanel(
HTML("<h3>Input parameters</h3>"),
sliderInput("Sepal.Length", label = "Sepal Length", value = 5.0,
min = min(TrainSet$Sepal.Length),
max = max(TrainSet$Sepal.Length)
),
sliderInput("Sepal.Width", label = "Sepal Width", value = 3.6,
min = min(TrainSet$Sepal.Width),
max = max(TrainSet$Sepal.Width)),
sliderInput("Petal.Length", label = "Petal Length", value = 1.4,
min = min(TrainSet$Petal.Length),
max = max(TrainSet$Petal.Length)),
sliderInput("Petal.Width", label = "Petal Width", value = 0.2,
min = min(TrainSet$Petal.Width),
max = max(TrainSet$Petal.Width)),
actionButton("submitbutton", "Submit", class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Status/Output')), # Status/Output Text Box
verbatimTextOutput('contents'),
tableOutput('tabledata') # Prediction results table
)
)
####################################
# Server                           #
####################################
server<- function(input, output, session) {
# Input Data
datasetInput <- reactive({
df <- data.frame(
Name = c("Sepal Length",
"Sepal Width",
"Petal Length",
"Petal Width"),
Value = as.character(c(input$Sepal.Length,
input$Sepal.Width,
input$Petal.Length,
input$Petal.Width)),
stringsAsFactors = FALSE)
Species <- 0
df <- rbind(df, Species)
input <- transpose(df)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
})
# Status/Output Text Box
output$contents <- renderPrint({
if (input$submitbutton>0) {
isolate("Calculation complete.")
} else {
return("Server is ready for calculation.")
}
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
####################################
# Data Professor                   #
# http://youtube.com/dataprofessor #
# http://github.com/dataprofessor  #
####################################
# Importing libraries
library(RCurl) # for downloading the iris CSV file
library(randomForest)
library(caret)
# Importing the Iris data set
iris <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/iris.csv"),
stringsAsFactors = TRUE)
# Performs stratified random split of the data set
TrainingIndex <- createDataPartition(iris$Species, p=0.8, list = FALSE)
TrainingSet <- iris[TrainingIndex,] # Training Set
TestingSet <- iris[-TrainingIndex,] # Test Set
write.csv(TrainingSet, "training.csv")
write.csv(TestingSet, "testing.csv")
TrainSet <- read.csv("training.csv", header = TRUE, stringsAsFactors = TRUE)
TrainSet <- TrainSet[,-1]
# Building Random forest model
model <- randomForest(Species ~ ., data = TrainSet, ntree = 500, mtry = 4, importance = TRUE)
# Save model to RDS file
saveRDS(model, "RF_model.rds")
#getwd()
#==================================================================
#-------------BMI Calculator ---------------------------------
#============================================================
library(shiny)
library(shinythemes)
#------------- UI Block -----------------
ui <- fluidPage( theme = shinytheme("united"),
navbarPage(title = "BMI Web App",
#-----Tab Panel 1  ---------
tabPanel(title = "Home",
sidebarPanel(
HTML("<h3>Input BMI Parameters</h3>"),
sliderInput(inputId = "height",
label = "Height (cm)",
min = 40, max = 250, value = 175),
sliderInput(inputId = "weight",
label = "Weight (kg)",
min = 20 , max = 100 , value = 70),
actionButton(inputId = "submitbutton", label = "Submit",
class = "btn btn-primary")
),
mainPanel(
HTML(text = "<h2> BMI Result </h2>"),
verbatimTextOutput("contents"),
tableOutput("tabledata") #Results Table
)
),
#-----Tab Panel 2-----
tabPanel(title = "About Application",
div(includeMarkdown("about.md"),
align = "justify")
)
)
)
#------------- Server Block -------------------
server <- function(input, output, session){
#Input Data
datasetInput <- reactive({
bmi_calc <- input$weight / ((input$height/100) * (input$height/100) )
bmi <- data.frame(BMI = bmi_calc)
#names(bmi) <- "BMI"
print(bmi)
})
#Results Textbox
output$contents <- renderPrint({
if (input$submitbutton > 0){
isolate("Calculation Complete")
} else {
return("Server is ready for Calculation")
}
})
#Prediction Results Table - Activates the datasetInput function when submit is pressed
output$tabledata <- renderTable({
if (input$submitbutton>0){
isolate(datasetInput())
}
})
}
# ------------- Launch Shiny App -------------------
shinyApp(ui = ui, server = server)
runApp('D:/data_science/Rshiny - Data science Professor/app_3_datadriven.R')
runApp('D:/data_science/Rshiny - Data science Professor/app_3_datadriven.R')
runApp('D:/data_science/Rshiny - Data science Professor/Data_driven_app.r')
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/kelvin-meyet/Data-Science/ML-AI-PROJECTS/weather-weka.csv"),
stringsAsFactors = TRUE)
weather
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/kelvin-meyet/Data-Science/ML-AI-PROJECTS/weather-weka.csv"),
stringsAsFactors = TRUE)
View(weather)
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/kelvin-meyet/Data-Science/ML-AI-PROJECTS/Datasets/weather-weka.csv"),
stringsAsFactors = TRUE)
View(weather)
runApp('C:/Users/dumbl/KELVIN-GITHUB-WORKS/Data-Science/R-shiny/Golf_prediction/Data_driven_app.r')
runApp('C:/Users/dumbl/KELVIN-GITHUB-WORKS/Data-Science/R-shiny/Golf_prediction/Data_driven_app.r')
